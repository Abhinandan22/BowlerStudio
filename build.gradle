apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'application'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
	ext.mainClass = 'com.neuronrobotics.bowlerstudio.BowlerStudio'
}
File buildDir = file(".");

configurations.all {
	exclude module: 'slf4j-log4j12'
}

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
	gradleVersion = '2.1'
}

Properties props = new Properties()
props.load(new FileInputStream(buildDir.getAbsolutePath()+"/src/main/resources/com/neuronrobotics/bowlerstudio/build.properties"))

		boolean is64Bit() {
			////System.out.println("Arch: "+getOsArch());
			return getOsArch().startsWith("x86_64") || getOsArch().startsWith("amd64");
		}
		 boolean isARM() {
			return getOsArch().startsWith("arm");
		}
		 boolean isCortexA8(){
			if(isARM()){
				//TODO check for cortex a8 vs arm9 generic
				return true;
			}
			return false;
		}
		 boolean isWindows() {
			////System.out.println("OS name: "+getOsName());
			return getOsName().toLowerCase().startsWith("windows") ||getOsName().toLowerCase().startsWith("microsoft") || getOsName().toLowerCase().startsWith("ms");
		}
		
		 boolean isLinux() {
			return getOsName().toLowerCase().startsWith("linux");
		}
		
		 boolean isOSX() {
			return getOsName().toLowerCase().startsWith("mac");
		}
		
		 String getExtension() {
			if(isWindows()) {
				return ".dll";
			}
			
			if(isLinux()) {
				return ".so";
			}
			
			if(isOSX()) {
				return ".jnilib";
			}
			
			return "";
		}
		
		String getOsName() {	
			return System.getProperty("os.name");
		}
		
		String getOsArch() {
			return System.getProperty("os.arch");
		}

repositories {
	mavenCentral()
	maven { url 'https://oss.sonatype.org/content/repositories/releases/'  }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots/'  }
	maven { url 'http://repo.jenkins-ci.org/public/' }
	maven { url 'http://clojars.org/repo' }
}

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.10'

	compile "com.neuronrobotics:BowlerScriptingKernel:0.6.3"
	
	//compile fileTree (dir: '../bowler-script-kernel/build/libs', includes: ['BowlerScriptingKernel-0.5.0.jar'])
	
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {
	//zip64 true
	jar.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	jar.baseName= "BowlerStudio";
	doFirst {
		
		// dependencies except VRL
		from (configurations.runtime.asFileTree.
				filter({file->return !file.name.startsWith("vrl-0")}).
				files.collect { zipTree(it) } ){
					exclude 'META-INF/MANIFEST.MF'
					exclude 'META-INF/*.SF'
					exclude 'META-INF/*.DSA'
					exclude 'META-INF/*.RSA'
				}
	}

	// project class files compiled from source
	//from files(sourceSets.main.output.classesDir)

	manifest {  
	    attributes(	
	    				"Main-Class": mainClass,
	    				"SplashScreen-Image": "com/neuronrobotics/nrconsole/images/logo.png",
		    			"Manifest-Version": "1.0",
		    			"Created-By": "Neuron Robotics Cooperative",
		    			"Specification-Title": props."app.name",
		    			"Specification-Version": props."app.version",
		    			"Specification-Vendor": "Neuron Robotics Cooperative",,
		    			"Implementation-Title": props."app.name",
		    			"Implementation-Version" : props."app.version",
		    			"Implementation-Vendor": "Neuron Robotics Cooperative"

		        		
		    )
		}
}

//task run(type: JavaExec) {
//	classpath = sourceSets.main.runtimeClasspath
//	main = mainClass;
//	//    jvmArgs = ['-Dprism.forceGPU=true', '-Dprism.verbose=true']
//	jvmArgs = ['-Dprism.forceGPU=true']
//}
